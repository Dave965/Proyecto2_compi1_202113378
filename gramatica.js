/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,60],$V2=[1,61],$V3=[1,62],$V4=[1,38],$V5=[1,39],$V6=[1,40],$V7=[1,41],$V8=[1,42],$V9=[1,71],$Va=[1,72],$Vb=[1,73],$Vc=[1,74],$Vd=[1,75],$Ve=[1,76],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,25],$Vj=[1,26],$Vk=[1,27],$Vl=[1,28],$Vm=[1,29],$Vn=[1,30],$Vo=[1,31],$Vp=[1,32],$Vq=[1,64],$Vr=[1,63],$Vs=[1,65],$Vt=[1,70],$Vu=[1,66],$Vv=[1,67],$Vw=[1,68],$Vx=[1,69],$Vy=[1,37],$Vz=[5,25,45,57,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,85,87,90,92,96,97,98,99,100,102,104,105,106,107,108,109,110,111,112,113],$VA=[45,46,47,48,49,50,51,52,53,54,55,56,58,59],$VB=[2,6],$VC=[2,21],$VD=[1,85],$VE=[1,82],$VF=[1,99],$VG=[1,101],$VH=[1,102],$VI=[1,103],$VJ=[1,104],$VK=[1,100],$VL=[1,105],$VM=[1,106],$VN=[1,107],$VO=[1,108],$VP=[1,109],$VQ=[1,110],$VR=[1,111],$VS=[1,112],$VT=[1,113],$VU=[25,56,62,80],$VV=[43,45,46,47,48,49,50,51,52,53,54,55,56,58,59,62,77,78,81,86],$VW=[2,4],$VX=[1,116],$VY=[43,45,46,47,48,49,50,51,52,53,54,55,56,58,59,62,77,78,81,85,86],$VZ=[1,128],$V_=[1,129],$V$=[43,45,51,52,53,54,55,56,58,59,62,77,78,81,86],$V01=[43,58,59,62,77,78,81,86],$V11=[62,86],$V21=[43,45,47,48,49,50,51,52,53,54,55,56,58,59,62,77,78,81,86],$V31=[1,227],$V41=[2,82],$V51=[43,62,77,78,81,86],$V61=[1,262],$V71=[1,261],$V81=[2,90],$V91=[85,96,97],$Va1=[85,86];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"programa":3,"instrucciones":4,"EOF":5,"expression":6,"aritmetico":7,"condicional":8,"logico":9,"actualizacion":10,"casteo":11,"acceso_vector":12,"acceso_lista":13,"llamada":14,"funcion_toupper":15,"funcion_tolower":16,"funcion_length":17,"funcion_round":18,"ternario":19,"funcion_typeof":20,"funcion_tostring":21,"funcion_tochararray":22,"funcion_truncate":23,"datos":24,"ID":25,"instruccion":26,"declaracion_variable":27,"asignacion_variable":28,"declaracion_vector":29,"modificacion_vector":30,"declaracion_lista":31,"agregar_lista":32,"modificacion_lista":33,"sentencia_if":34,"sentencia_switch":35,"sentencia_while":36,"sentencia_for":37,"sentencia_do_while":38,"declaracion_funcion":39,"declaracion_metodo":40,"funcion_print":41,"transferencia":42,"PC":43,"funcion_main":44,"MENOS":45,"POTENCIA":46,"BARRA":47,"ASTERISCO":48,"MAS":49,"PORCENTAJE":50,"IGUAL":51,"DESIGUAL":52,"MENORIGUAL":53,"MENOR":54,"MAYORIGUAL":55,"MAYOR":56,"NOT":57,"AND":58,"OR":59,"PAREN_A":60,"tipo":61,"PAREN_C":62,"R_INT":63,"R_DOUBLE":64,"R_BOOLEAN":65,"R_CHAR":66,"R_STRING":67,"DOUBLE":68,"CHAR":69,"STRING":70,"R_TRUE":71,"R_FALSE":72,"INT":73,"R_BREAK":74,"R_CONTINUE":75,"R_RETURN":76,"INTERROGACION":77,"DP":78,"ASIGNACION":79,"CORCHETE_A":80,"CORCHETE_C":81,"R_NEW":82,"LLAVE_A":83,"lista_valores":84,"LLAVE_C":85,"COMA":86,"R_LIST":87,"PUNTO":88,"R_ADD":89,"R_IF":90,"R_ELSE":91,"R_SWITCH":92,"lista_casos":93,"defecto":94,"caso":95,"R_CASE":96,"R_DEFAULT":97,"R_WHILE":98,"R_FOR":99,"R_DO":100,"parametros":101,"R_VOID":102,"parametros_llamada":103,"R_PRINT":104,"R_TOLOWER":105,"R_TOUPPER":106,"R_LENGTH":107,"R_TRUNCATE":108,"R_ROUND":109,"R_TYPEOF":110,"R_TOSTRING":111,"R_TOCHARARRAY":112,"R_MAIN":113,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",25:"ID",43:"PC",45:"MENOS",46:"POTENCIA",47:"BARRA",48:"ASTERISCO",49:"MAS",50:"PORCENTAJE",51:"IGUAL",52:"DESIGUAL",53:"MENORIGUAL",54:"MENOR",55:"MAYORIGUAL",56:"MAYOR",57:"NOT",58:"AND",59:"OR",60:"PAREN_A",62:"PAREN_C",63:"R_INT",64:"R_DOUBLE",65:"R_BOOLEAN",66:"R_CHAR",67:"R_STRING",68:"DOUBLE",69:"CHAR",70:"STRING",71:"R_TRUE",72:"R_FALSE",73:"INT",74:"R_BREAK",75:"R_CONTINUE",76:"R_RETURN",77:"INTERROGACION",78:"DP",79:"ASIGNACION",80:"CORCHETE_A",81:"CORCHETE_C",82:"R_NEW",83:"LLAVE_A",85:"LLAVE_C",86:"COMA",87:"R_LIST",88:"PUNTO",89:"R_ADD",90:"R_IF",91:"R_ELSE",92:"R_SWITCH",96:"R_CASE",97:"R_DEFAULT",98:"R_WHILE",99:"R_FOR",100:"R_DO",102:"R_VOID",104:"R_PRINT",105:"R_TOLOWER",106:"R_TOUPPER",107:"R_LENGTH",108:"R_TRUNCATE",109:"R_ROUND",110:"R_TYPEOF",111:"R_TOSTRING",112:"R_TOCHARARRAY",113:"R_MAIN"},
productions_: [0,[3,2],[3,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[4,2],[4,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,2],[26,1],[7,2],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[9,2],[9,3],[9,3],[10,3],[10,3],[11,4],[61,1],[61,1],[61,1],[61,1],[61,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[42,2],[42,2],[42,2],[42,3],[19,5],[27,3],[27,5],[28,4],[29,11],[29,9],[12,4],[30,7],[84,3],[84,3],[84,1],[84,1],[31,12],[32,7],[13,6],[33,9],[34,7],[34,11],[34,9],[35,8],[35,7],[35,7],[93,2],[93,1],[95,4],[94,3],[36,7],[37,10],[37,10],[38,9],[39,8],[39,7],[40,8],[40,7],[101,4],[101,2],[14,4],[14,3],[103,3],[103,1],[41,5],[16,4],[15,4],[17,4],[17,4],[23,4],[23,4],[18,4],[18,4],[20,4],[20,4],[21,4],[21,4],[22,4],[22,4],[44,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
	let resultado = new Nodo("Programa");
	resultado.hijos.push($$[$0-1]);
	return resultado;

break;
case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20:
 
	this.$ = new Nodo("Expression");
	this.$.hijos.push($$[$0]);

break;
case 21:
 
	this.$ = new Nodo("Expression");
	this.$.hijos.push(new Nodo("ID",$$[$0]));

break;
case 22:
 
	this.$ = new Nodo("instrucciones");
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push($$[$0]);

break;
case 23:
 
	this.$ = new Nodo("instrucciones");
	this.$.hijos.push($$[$0]);

break;
case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 41:
 
	this.$ = new Nodo("instruccion");
	this.$.hijos.push($$[$0]);

break;
case 40:
 
	this.$ = new Nodo("instruccion");
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("PC",$$[$0]))

break;
case 42:
 
	this.$ = new Nodo("aritmetico");
	this.$.hijos.push(new Nodo("MENOS",$$[$0-1]))
	this.$.hijos.push($$[$0]);

break;
case 43:
 
	this.$ = new Nodo("aritmetico");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("POTENCIA",$$[$0-1]))
	this.$.hijos.push($$[$0]);

break;
case 44:
 
	this.$ = new Nodo("aritmetico");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("BARRA",$$[$0-1]))
	this.$.hijos.push($$[$0]);

break;
case 45:
 
	this.$ = new Nodo("aritmetico");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("ASTERISCO",$$[$0-1]))
	this.$.hijos.push($$[$0]);

break;
case 46:
 
	this.$ = new Nodo("aritmetico");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("MAS",$$[$0-1]))
	this.$.hijos.push($$[$0]);

break;
case 47:
 
	this.$ = new Nodo("aritmetico");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("MENOS",$$[$0-1]))
	this.$.hijos.push($$[$0]);

break;
case 48:
 
	this.$ = new Nodo("aritmetico");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("PORCENTAJE",$$[$0-1]))
	this.$.hijos.push($$[$0]);

break;
case 49:
 
	this.$ = new Nodo("Condicional");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("IGUAL",$$[$0-1]))
	this.$.hijos.push($$[$0]);

break;
case 50:
 
	this.$ = new Nodo("Condicional");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("DESIGUAL",$$[$0-1]))
	this.$.hijos.push($$[$0]);

break;
case 51:
 
	this.$ = new Nodo("Condicional");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("MENORIGUAL",$$[$0-1]))
	this.$.hijos.push($$[$0]);

break;
case 52:
 
	this.$ = new Nodo("Condicional");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("MENOR",$$[$0-1]))
	this.$.hijos.push($$[$0]);

break;
case 53:
 
	this.$ = new Nodo("Condicional");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("MAYORIGUAL",$$[$0-1]))
	this.$.hijos.push($$[$0]);

break;
case 54:
 
	this.$ = new Nodo("Condicional");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("MAYOR",$$[$0-1]))
	this.$.hijos.push($$[$0]);

break;
case 55:
 
	this.$ = new Nodo("Logico");
	this.$.hijos.push(new Nodo("NOT",$$[$0-1]))
	this.$.hijos.push($$[$0]);

break;
case 56:
 
	this.$ = new Nodo("Logico");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("AND",$$[$0-1]))
	this.$.hijos.push($$[$0]);

break;
case 57:
 
	this.$ = new Nodo("Logico");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("OR",$$[$0-1]))
	this.$.hijos.push($$[$0]);

break;
case 58:
 
	this.$ = new Nodo("Actualizacion");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("MAS",$$[$0-1]))
	this.$.hijos.push(new Nodo("MAS",$$[$0]));

break;
case 59:
 
	this.$ = new Nodo("Actualizacion");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("MENOS",$$[$0-1]))
	this.$.hijos.push(new Nodo("MENOS",$$[$0]));

break;
case 60:
 
	this.$ = new Nodo("Casteo");
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-3]))
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0-1]))
	this.$.hijos.push($$[$0]);

break;
case 61:
 
	this.$ = new Nodo("Tipo");
	this.$.hijos.push(new Nodo("R_INT",$$[$0]));

break;
case 62:
 
	this.$ = new Nodo("Tipo");
	this.$.hijos.push(new Nodo("R_DOUBLE",$$[$0]));

break;
case 63:
 
	this.$ = new Nodo("Tipo");
	this.$.hijos.push(new Nodo("R_BOOLEAN",$$[$0]));

break;
case 64:
 
	this.$ = new Nodo("Tipo");
	this.$.hijos.push(new Nodo("R_CHAR",$$[$0]));

break;
case 65:
 
	this.$ = new Nodo("Tipo");
	this.$.hijos.push(new Nodo("R_STRING",$$[$0]));

break;
case 66:
 
	this.$ = new Nodo("Datos");
	this.$.hijos.push(new Nodo("DOUBLE",$$[$0]));

break;
case 67:
 
	this.$ = new Nodo("Datos");
	this.$.hijos.push(new Nodo("CHAR",$$[$0]));

break;
case 68:
 
	this.$ = new Nodo("Datos");
	this.$.hijos.push(new Nodo("STRING",$$[$0]));

break;
case 69:
 
	this.$ = new Nodo("Datos");
	this.$.hijos.push(new Nodo("R_TRUE",$$[$0]));

break;
case 70:
 
	this.$ = new Nodo("Datos");
	this.$.hijos.push(new Nodo("R_FALSE",$$[$0]));

break;
case 71:
 
	this.$ = new Nodo("Datos");
	this.$.hijos.push(new Nodo("INT",$$[$0]));

break;
case 72:
 
	this.$ = new Nodo("Transferencia");
	this.$.hijos.push(new Nodo("R_BREAK",$$[$0-1]));
	this.$.hijos.push(new Nodo("PC",$$[$0]));

break;
case 73:
 
	this.$ = new Nodo("Transferencia");
	this.$.hijos.push(new Nodo("R_CONTINUE",$$[$0-1]));
	this.$.hijos.push(new Nodo("PC",$$[$0]));

break;
case 74:
 
	this.$ = new Nodo("Transferencia");
	this.$.hijos.push(new Nodo("R_RETURN",$$[$0-1]));
	this.$.hijos.push(new Nodo("PC",$$[$0]));

break;
case 75:
 
	this.$ = new Nodo("Transferencia");
	this.$.hijos.push(new Nodo("R_RETURN",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("PC",$$[$0]));

break;
case 76:
 
	this.$ = new Nodo("Ternario");
	this.$.hijos.push($$[$0-4]);
	this.$.hijos.push(new Nodo("INTERROGACION",$$[$0-3]));
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("DP",$$[$0-1]));
	this.$.hijos.push($$[$0]);

break;
case 77:
 
	this.$ = new Nodo("Declaracion variable");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("ID",$$[$0-1]));
	this.$.hijos.push(new Nodo("PC",$$[$0]));

break;
case 78:
 
	this.$ = new Nodo("Declaracion variable");
	this.$.hijos.push($$[$0-4]);
	this.$.hijos.push(new Nodo("ID",$$[$0-3]));
	this.$.hijos.push(new Nodo("ASIGNACION",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("PC",$$[$0]));

break;
case 79:
 
	this.$ = new Nodo("Asignacion variable");
	this.$.hijos.push(new Nodo("ID",$$[$0-3]));
	this.$.hijos.push(new Nodo("ASIGNACION",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("PC",$$[$0]));

break;
case 80:

	this.$ = new Nodo("Declaracion vector");
	this.$.hijos.push($$[$0-10]);
	this.$.hijos.push(new Nodo("CORCHETE_A",$$[$0-9]));
	this.$.hijos.push(new Nodo("CORCHETE_C",$$[$0-8]));
	this.$.hijos.push(new Nodo("ID",$$[$0-7]));
	this.$.hijos.push(new Nodo("ASIGNACION",$$[$0-6]));
	this.$.hijos.push(new Nodo("R_NEW",$$[$0-5]));
	this.$.hijos.push($$[$0-4]);
	this.$.hijos.push(new Nodo("CORCHETE_A",$$[$0-3]));
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("CORCHETE_C",$$[$0-1]));
	this.$.hijos.push(new Nodo("PC",$$[$0]));

break;
case 81:

	this.$ = new Nodo("Declaracion vector");
	this.$.hijos.push($$[$0-8]);
	this.$.hijos.push(new Nodo("CORCHETE_A",$$[$0-7]));
	this.$.hijos.push(new Nodo("CORCHETE_C",$$[$0-6]));
	this.$.hijos.push(new Nodo("ID",$$[$0-5]));
	this.$.hijos.push(new Nodo("ASIGNACION",$$[$0-4]));
	this.$.hijos.push(new Nodo("LLAVE_A",$$[$0-3]));
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("LLAVE_C",$$[$0-1]));
	this.$.hijos.push(new Nodo("PC",$$[$0]));

break;
case 82:

	this.$ = new Nodo("Acceso vector");
	this.$.hijos.push(new Nodo("ID",$$[$0-3]));
	this.$.hijos.push(new Nodo("CORCHETE_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("CORCHETE_C",$$[$0]));

break;
case 83:

	this.$ = new Nodo("Acceso vector");
	this.$.hijos.push(new Nodo("ID",$$[$0-6]));
	this.$.hijos.push(new Nodo("CORCHETE_A",$$[$0-5]));
	this.$.hijos.push($$[$0-4]);
	this.$.hijos.push(new Nodo("CORCHETE_C",$$[$0-3]));
	this.$.hijos.push(new Nodo("ASIGNACION",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("PC",$$[$0]));

break;
case 84:
 
	this.$ = new Nodo("Lista valores");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("COMA",$$[$0-1]));
	this.$.hijos.push($$[$0]);

break;
case 85:
 
	this.$ = new Nodo("Lista valores");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("COMA",$$[$0-1]));
	this.$.hijos.push(new Nodo("ID",$$[$0]));

break;
case 86:
 
	this.$ = new Nodo("Lista valores");
	this.$.hijos.push(new Nodo("ID",$$[$0]));

break;
case 87:
 
	this.$ = new Nodo("Lista valores");
	this.$.hijos.push($$[$0]);

break;
case 88:

	this.$ = new Nodo("Declaracion lista");
	this.$.hijos.push(new Nodo("R_LIST",$$[$0-11]));
	this.$.hijos.push(new Nodo("MENOR",$$[$0-10]));
	this.$.hijos.push($$[$0-9]);
	this.$.hijos.push(new Nodo("MAYOR",$$[$0-8]));
	this.$.hijos.push(new Nodo("ID",$$[$0-7]));
	this.$.hijos.push(new Nodo("ASIGNACION",$$[$0-6]));
	this.$.hijos.push(new Nodo("R_NEW",$$[$0-5]));
	this.$.hijos.push(new Nodo("R_LIST",$$[$0-4]));
	this.$.hijos.push(new Nodo("MENOR",$$[$0-3]));
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("MAYOR",$$[$0-1]));
	this.$.hijos.push(new Nodo("PC",$$[$0-1]));

break;
case 89:

	this.$ = new Nodo("Agregar lista");
	this.$.hijos.push(new Nodo("ID",$$[$0-6]));
	this.$.hijos.push(new Nodo("PUNTO",$$[$0-5]));
	this.$.hijos.push(new Nodo("R_ADD",$$[$0-4]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-3]));
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0-1]));
	this.$.hijos.push(new Nodo("PC",$$[$0]));

break;
case 90:

	this.$ = new Nodo("Acceso lista");
	this.$.hijos.push(new Nodo("ID",$$[$0-5]));
	this.$.hijos.push(new Nodo("CORCHETE_A",$$[$0-4]));
	this.$.hijos.push(new Nodo("CORCHETE_A",$$[$0-3]));
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("CORCHETE_C",$$[$0-2]));
	this.$.hijos.push(new Nodo("CORCHETE_C",$$[$0-1]));

break;
case 91:

	this.$ = new Nodo("Modificacion lista");
	this.$.hijos.push(new Nodo("ID",$$[$0-8]));
	this.$.hijos.push(new Nodo("CORCHETE_A",$$[$0-7]));
	this.$.hijos.push(new Nodo("CORCHETE_A",$$[$0-6]));
	this.$.hijos.push($$[$0-5]);
	this.$.hijos.push(new Nodo("CORCHETE_C",$$[$0-5]));
	this.$.hijos.push(new Nodo("CORCHETE_C",$$[$0-4]));
	this.$.hijos.push(new Nodo("ASIGNACION",$$[$0-3]));
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("PC",$$[$0-1]));

break;
case 92:

	this.$ = new Nodo("Sentencia if");
	this.$.hijos.push(new Nodo("R_IF",$$[$0-6]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-5]));
	this.$.hijos.push($$[$0-4]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0-3]));
	this.$.hijos.push(new Nodo("LLAVE_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("LLAVE_C",$$[$0]));

break;
case 93:

	this.$ = new Nodo("Sentencia if");
	this.$.hijos.push(new Nodo("R_IF",$$[$0-10]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-9]));
	this.$.hijos.push($$[$0-8]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0-7]));
	this.$.hijos.push(new Nodo("LLAVE_A",$$[$0-6]));
	this.$.hijos.push($$[$0-5]);
	this.$.hijos.push(new Nodo("LLAVE_C",$$[$0-4]));
	this.$.hijos.push(new Nodo("R_ELSE",$$[$0-3]));
	this.$.hijos.push(new Nodo("LLAVE_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("LLAVE_C",$$[$0]));

break;
case 94:

	this.$ = new Nodo("Sentencia if");
	this.$.hijos.push(new Nodo("R_IF",$$[$0-8]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-7]));
	this.$.hijos.push($$[$0-6]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0-5]));
	this.$.hijos.push(new Nodo("LLAVE_A",$$[$0-4]));
	this.$.hijos.push($$[$0-3]);
	this.$.hijos.push(new Nodo("LLAVE_C",$$[$0-2]));
	this.$.hijos.push(new Nodo("R_ELSE",$$[$0-1]));
	this.$.hijos.push($$[$0]);

break;
case 95:

	this.$ = new Nodo("Sentencia switch");
	this.$.hijos.push(new Nodo("R_SWITCH",$$[$0-7]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-6]));
	this.$.hijos.push($$[$0-5]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0-4]));
	this.$.hijos.push(new Nodo("LLAVE_A",$$[$0-3]));
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("LLAVE_C",$$[$0]));

break;
case 96: case 97:

	this.$ = new Nodo("Sentencia switch");
	this.$.hijos.push(new Nodo("R_SWITCH",$$[$0-6]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-5]));
	this.$.hijos.push($$[$0-4]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0-3]));
	this.$.hijos.push(new Nodo("LLAVE_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("LLAVE_C",$$[$0]));

break;
case 98:
 
	this.$ = new Nodo("Lista casos");
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push($$[$0]);

break;
case 99:
 
	this.$ = new Nodo("Lista casos");
	this.$.hijos.push($$[$0]);

break;
case 100:
 
	this.$ = new Nodo("Caso");
	this.$.hijos.push(new Nodo("R_CASE",$$[$0-3]));
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("DP",$$[$0-1]));
	this.$.hijos.push($$[$0]);

break;
case 101:
 
	this.$ = new Nodo("Default");
	this.$.hijos.push(new Nodo("R_DEFAULT",$$[$0-2]));
	this.$.hijos.push(new Nodo("DP",$$[$0-1]));
	this.$.hijos.push($$[$0]);

break;
case 102:

	this.$ = new Nodo("Sentencia while");
	this.$.hijos.push(new Nodo("R_WHILE",$$[$0-6]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-5]));
	this.$.hijos.push($$[$0-4]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0-3]));
	this.$.hijos.push(new Nodo("LLAVE_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("LLAVE_C",$$[$0]));

break;
case 103:

	this.$ = new Nodo("Sentencia for");
	this.$.hijos.push(new Nodo("R_FOR",$$[$0-9]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-8]));
	this.$.hijos.push($$[$0-7]);
	this.$.hijos.push($$[$0-6]);
	this.$.hijos.push(new Nodo("PC",$$[$0-5]));
	this.$.hijos.push($$[$0-4]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0-3]));
	this.$.hijos.push(new Nodo("LLAVE_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("LLAVE_C",$$[$0]));

break;
case 104:

	this.$ = new Nodo("Sentencia for");
	this.$.hijos.push(new Nodo("R_FOR",$$[$0-9]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-8]));
	this.$.hijos.push($$[$0-7]);
	this.$.hijos.push(new Nodo("PC",$$[$0-6]));
	this.$.hijos.push($$[$0-5]);
	this.$.hijos.push(new Nodo("PC",$$[$0-4]));
	this.$.hijos.push($$[$0-3]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0-2]));
	this.$.hijos.push(new Nodo("LLAVE_A",$$[$0-1]));
	this.$.hijos.push($$[$0]);
	this.$.hijos.push(new Nodo("LLAVE_C",$$[$01]));

break;
case 105:

	this.$ = new Nodo("Sentencia do while");
	this.$.hijos.push(new Nodo("R_DO",$$[$0-8]));
	this.$.hijos.push(new Nodo("LLAVE_A",$$[$0-7]));
	this.$.hijos.push($$[$0-6]);
	this.$.hijos.push(new Nodo("LLAVE_C",$$[$0-5]));
	this.$.hijos.push(new Nodo("R_WHILE",$$[$0-4]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-3]));
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0-1]));
	this.$.hijos.push(new Nodo("PC",$$[$0]));

break;
case 106:

	this.$ = new Nodo("Declaracion funcion");
	this.$.hijos.push($$[$0-7]);
	this.$.hijos.push(new Nodo("ID",$$[$0-6]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-5]));
	this.$.hijos.push($$[$0-4]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0-3]));
	this.$.hijos.push(new Nodo("LLAVE_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("LLAVE_C",$$[$0]));

break;
case 107:

	this.$ = new Nodo("Declaracion funcion");
	this.$.hijos.push($$[$0-6]);
	this.$.hijos.push(new Nodo("ID",$$[$0-5]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-4]));
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0-3]));
	this.$.hijos.push(new Nodo("LLAVE_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("LLAVE_C",$$[$0]));

break;
case 108:

	this.$ = new Nodo("Declaracion metodo");
	this.$.hijos.push(new Nodo("R_VOID",$$[$0-7]));
	this.$.hijos.push(new Nodo("ID",$$[$0-6]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-5]));
	this.$.hijos.push($$[$0-4]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0-3]));
	this.$.hijos.push(new Nodo("LLAVE_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("LLAVE_C",$$[$0]));

break;
case 109:

	this.$ = new Nodo("Declaracion metodo");
	this.$.hijos.push(new Nodo("R_VOID",$$[$0-6]));
	this.$.hijos.push(new Nodo("ID",$$[$0-5]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-4]));
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0-3]));
	this.$.hijos.push(new Nodo("LLAVE_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("LLAVE_C",$$[$0]));

break;
case 110:

	this.$ = new Nodo("Parametros");
	this.$.hijos.push($$[$0-3]);
	this.$.hijos.push(new Nodo("COMA",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("ID",$$[$0]));

break;
case 111:

	this.$ = new Nodo("Parametros");
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("ID",$$[$0]));

break;
case 112:

	this.$ = new Nodo("Llamada");
	this.$.hijos.push(new Nodo("ID",$$[$0-3]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0]));

break;
case 113:
 
	this.$ = new Nodo("Llamada");
	this.$.hijos.push(new Nodo("ID",$$[$0-2]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-1]));
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0]));

break;
case 114:
 
	this.$ = new Nodo("Parametros llamada");
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("COMA",$$[$0-1]));
	this.$.hijos.push($$[$0]);

break;
case 115:
 
	this.$ = new Nodo("Parametros llamada");
	this.$.hijos.push($$[$0]);

break;
case 116:
 
	this.$ = new Nodo("Funcion print");
	this.$.hijos.push(new Nodo("R_PRINT",$$[$0-4]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-3]));
	this.$.hijos.push($$[$0-2]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0-1]));
	this.$.hijos.push(new Nodo("PC",$$[$0]));

break;
case 117:
 
	this.$ = new Nodo("Funcion toLower");
	this.$.hijos.push(new Nodo("R_TOLOWER",$$[$0-3]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0]));

break;
case 118:
 
	this.$ = new Nodo("Funcion toUpper");
	this.$.hijos.push(new Nodo("R_TOUPPER",$$[$0-3]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0]));

break;
case 119:
 
	this.$ = new Nodo("Funcion length");
	this.$.hijos.push(new Nodo("R_LENGTH",$$[$0-3]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0]));

break;
case 120:
 
	this.$ = new Nodo("Funcion length");
	this.$.hijos.push(new Nodo("R_LENGTH",$$[$0-3]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-2]));
	this.$.hijos.push(new Nodo("ID",$$[$0-1]));
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0]));

break;
case 121:
 
	this.$ = new Nodo("Funcion truncate");
	this.$.hijos.push(new Nodo("R_TRUNCATE",$$[$0-3]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0]));

break;
case 122:
 
	this.$ = new Nodo("Funcion truncate");
	this.$.hijos.push(new Nodo("R_TRUNCATE",$$[$0-3]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-2]));
	this.$.hijos.push(new Nodo("ID",$$[$0-1]));
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0]));

break;
case 123:
 
	this.$ = new Nodo("Funcion round");
	this.$.hijos.push(new Nodo("R_ROUND",$$[$0-3]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0]));

break;
case 124:
 
	this.$ = new Nodo("Funcion round");
	this.$.hijos.push(new Nodo("R_ROUND",$$[$0-3]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-2]));
	this.$.hijos.push(new Nodo("ID",$$[$0-1]));
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0]));

break;
case 125:
 
	this.$ = new Nodo("Funcion typeOf");
	this.$.hijos.push(new Nodo("R_TYPEOF",$$[$0-3]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0]));

break;
case 126:
 
	this.$ = new Nodo("Funcion typeOf");
	this.$.hijos.push(new Nodo("R_TYPEOF",$$[$0-3]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-2]));
	this.$.hijos.push(new Nodo("ID",$$[$0-1]));
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0]));

break;
case 127:
 
	this.$ = new Nodo("Funcion toString");
	this.$.hijos.push(new Nodo("R_TOSTRING",$$[$0-3]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0]));

break;
case 128:
 
	this.$ = new Nodo("Funcion toString");
	this.$.hijos.push(new Nodo("R_TOSTRING",$$[$0-3]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-2]));
	this.$.hijos.push(new Nodo("ID",$$[$0-1]));
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0]));

break;
case 129:
 
	this.$ = new Nodo("Funcion toCharArray");
	this.$.hijos.push(new Nodo("R_TOCHARARRAY",$$[$0-3]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-2]));
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0]));
break;
case 130:
 
	this.$ = new Nodo("Funcion toCharArray");
	this.$.hijos.push(new Nodo("R_TOCHARARRAY",$$[$0-3]));
	this.$.hijos.push(new Nodo("PAREN_A",$$[$0-2]));
	this.$.hijos.push(new Nodo("ID",$$[$0-1]));
	this.$.hijos.push(new Nodo("PAREN_C",$$[$0]));

break;
case 131:
 
	this.$ = new Nodo("Funcion main");
	this.$.hijos.push(new Nodo("R_MAIN",$$[$0-2]))
	this.$.hijos.push($$[$0-1]);
	this.$.hijos.push(new Nodo("PC",$$[$0]));

break;
}
},
table: [{3:1,4:2,5:[1,3],6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{1:[3]},{5:[1,77],6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:78,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{1:[2,2]},o($Vz,[2,23]),o($Vz,[2,24]),o($Vz,[2,25]),o($Vz,[2,26]),o($Vz,[2,27]),o($Vz,[2,28]),o($Vz,[2,29]),o($Vz,[2,30]),o($Vz,[2,31]),o($Vz,[2,32]),o($Vz,[2,33]),o($Vz,[2,34]),o($Vz,[2,35]),o($Vz,[2,36]),o($Vz,[2,37]),o($Vz,[2,38]),o($Vz,[2,39]),o($VA,$VB,{43:[1,79]}),o($Vz,[2,41]),{25:[1,80],80:[1,81]},o($VA,$VC,{60:$VD,79:$VE,80:[1,83],88:[1,84]}),{54:[1,86]},{60:[1,87]},{60:[1,88]},{60:[1,89]},{60:[1,90]},{83:[1,91]},{25:[1,92]},{60:[1,93]},{43:[1,94]},{43:[1,95]},{6:97,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,43:[1,96],45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT},{14:114,25:[1,115]},o($VU,[2,61]),o($VU,[2,62]),o($VU,[2,63]),o($VU,[2,64]),o($VU,[2,65]),o($VV,[2,3]),o([43,45,46,47,48,49,50,51,52,53,54,55,56,58,59,62,78,81,86],$VW,{77:$VX}),o($VV,[2,5]),o($VV,[2,7]),o($VV,[2,8]),o($VV,[2,9]),o($VV,[2,10]),o($VV,[2,11]),o($VV,[2,12]),o($VV,[2,13]),o($VV,[2,14]),o($VV,[2,15]),o($VV,[2,16]),o($VV,[2,17]),o($VV,[2,18]),o($VV,[2,19]),o($VV,[2,20]),{6:117,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:118,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{61:119,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8},{60:[1,120]},{60:[1,121]},{60:[1,122]},{60:[1,123]},{60:[1,124]},{60:[1,125]},{60:[1,126]},{60:[1,127]},o($VY,[2,66]),o($VY,[2,67]),o($VY,[2,68]),o($VY,[2,69]),o($VY,[2,70]),o($VY,[2,71]),{1:[2,1]},o($Vz,[2,22]),o($Vz,[2,40]),{43:$VZ,60:[1,130],79:$V_},{81:[1,131]},{6:132,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:133,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,80:[1,134],105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{89:[1,135]},{6:138,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,62:[1,137],68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,103:136,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{61:139,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8},{6:140,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:141,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:142,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{25:[1,146],27:143,28:144,61:145,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8},{4:147,6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{60:[1,148]},{6:149,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},o($Vz,[2,72]),o($Vz,[2,73]),o($Vz,[2,74]),{43:[1,150],45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT},o($VV,$VB),o($VV,$VC,{60:$VD,80:[1,151]}),{6:153,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,49:[1,152],57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:155,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:[1,154],57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:156,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:157,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:158,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:159,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:160,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:161,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:162,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:163,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:164,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:165,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:166,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:167,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{43:[1,168]},{60:$VD},{6:169,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},o($V$,[2,42],{46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL}),o($V01,[2,55],{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR}),{62:[1,170]},{6:171,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:172,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{24:173,25:[1,174],68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve},{24:175,25:[1,176],68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve},{24:177,25:[1,178],68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve},{24:179,25:[1,180],68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve},{24:181,25:[1,182],68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve},{24:183,25:[1,184],68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve},o($Vz,[2,77]),{6:185,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{61:188,62:[1,187],63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,101:186},{25:[1,189]},{43:[1,190],45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT},{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT,81:[1,191]},{6:192,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{60:[1,193]},{62:[1,194],86:[1,195]},o($VV,[2,113]),o($V11,[2,115],{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT}),{56:[1,196]},{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT,62:[1,197]},{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT,62:[1,198]},{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT,62:[1,199]},{6:36,7:43,8:200,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:36,7:43,8:201,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{25:[1,202]},{79:$VE},{6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:78,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,85:[1,203],87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{61:188,62:[1,205],63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,101:204},{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT,62:[1,206]},o($Vz,[2,75]),{6:207,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,80:[1,208],105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},o($VV,[2,58]),o([43,45,49,51,52,53,54,55,56,58,59,62,77,78,81,86],[2,46],{46:$VH,47:$VI,48:$VJ,50:$VL}),o($VV,[2,59],{7:43,8:44,9:45,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,10:98,6:117,25:$VF,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx}),o($V$,[2,47],{46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL}),o($VV,[2,43]),o($V21,[2,44],{46:$VH}),o([43,45,48,49,51,52,53,54,55,56,58,59,62,77,78,81,86],[2,45],{46:$VH,47:$VI,50:$VL}),o($V21,[2,48],{46:$VH}),o([43,51,52,53,54,55,56,58,59,62,77,78,81,86],[2,49],{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL}),o([43,52,53,54,55,56,58,59,62,77,78,81,86],[2,50],{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM}),o([43,53,54,55,56,58,59,62,77,78,81,86],[2,51],{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN}),o([43,54,55,56,58,59,62,77,78,81,86],[2,52],{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO}),o([43,55,56,58,59,62,77,78,81,86],[2,53],{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP}),o([43,56,58,59,62,77,78,81,86],[2,54],{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ}),o($V01,[2,56],{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR}),o([43,59,62,77,78,81,86],[2,57],{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS}),o($Vz,[2,131]),{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT,78:[1,209]},{6:210,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT,62:[1,211]},{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT,62:[1,212]},{62:[1,213]},{62:[1,214]},{62:[1,215]},{62:[1,216]},{62:[1,217]},{62:[1,218]},{62:[1,219]},{62:[1,220]},{62:[1,221]},{62:[1,222]},{62:[1,223]},{62:[1,224]},{43:[1,225],45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT},{62:[1,226],86:$V31},{83:[1,228]},{25:[1,229]},{79:[1,230]},o($Vz,[2,79]),o($VA,$V41,{79:[1,231]}),{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT,81:[1,232]},{6:233,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},o($VV,[2,112]),{6:234,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{25:[1,235]},{83:[1,236]},{83:[1,237]},{83:[1,238]},o($VA,$VW,{43:[1,239],77:$VX}),o($VA,$VW,{43:[1,240],77:$VX}),{43:$VZ,79:$V_},{98:[1,241]},{62:[1,242],86:$V31},{83:[1,243]},{43:[1,244]},{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT,81:[1,245]},{6:246,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:247,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},o($V51,[2,60],{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT}),o($VV,[2,118]),o($VV,[2,117]),o($VV,[2,119]),o($VV,[2,120]),o($VV,[2,123]),o($VV,[2,124]),o($VV,[2,125]),o($VV,[2,126]),o($VV,[2,127]),o($VV,[2,128]),o($VV,[2,129]),o($VV,[2,130]),o($VV,[2,121]),o($VV,[2,122]),o($Vz,[2,78]),{83:[1,248]},{61:249,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8},{4:250,6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($V11,[2,111]),{82:[1,251],83:[1,252]},{6:253,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{81:[1,254]},{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT,62:[1,255]},o($V11,[2,114],{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT}),{79:[1,256]},{4:257,6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{93:258,94:259,95:260,96:$V61,97:$V71},{4:263,6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{6:36,7:43,8:44,9:45,10:264,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:36,7:43,8:44,9:45,10:265,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{60:[1,266]},{83:[1,267]},{4:268,6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($Vz,[2,116]),o($VV,$V41),{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT,81:[1,269]},o($V51,[2,76],{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT}),{4:270,6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{25:[1,271]},{6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:78,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,85:[1,272],87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{61:273,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8},{24:276,25:[1,275],68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,84:274},{43:[1,277],45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT},o($VA,$V81,{79:[1,278]}),{43:[1,279]},{82:[1,280]},{6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:78,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,85:[1,281],87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{85:[1,283],94:282,95:284,96:$V61,97:$V71},{85:[1,285]},o($V91,[2,99]),{78:[1,286]},{6:287,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:78,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,85:[1,288],87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($VA,$VB,{62:[1,289]}),o($VA,$VB,{62:[1,290]}),{6:291,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{4:292,6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:78,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,85:[1,293],87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{81:[1,294]},{6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:78,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,85:[1,295],87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($V11,[2,110]),o($Vz,[2,107]),{80:[1,296]},{85:[1,297],86:[1,298]},o($Va1,[2,86]),o($Va1,[2,87]),o($Vz,[2,83]),{6:299,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},o($Vz,[2,89]),{87:[1,300]},o($Vz,[2,92],{91:[1,301]}),{85:[1,302]},o($Vz,[2,96]),o($V91,[2,98]),o($Vz,[2,97]),{4:303,6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT,78:[1,304]},o($Vz,[2,102]),{83:[1,305]},{83:[1,306]},{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT,62:[1,307]},{6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:78,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,85:[1,308],87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($Vz,[2,109]),o($VV,$V81),o($Vz,[2,106]),{6:309,7:43,8:44,9:45,10:98,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$VF,45:$V1,57:$V2,60:$V3,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx},{43:[1,310]},{24:311,25:[1,312],68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve},{43:[1,313],45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT},{54:[1,314]},{34:316,83:[1,315],90:$Vj},o($Vz,[2,95]),{6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:78,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,85:[2,101],87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{4:317,6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{4:318,6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{4:319,6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{43:[1,320]},o($Vz,[2,108]),{45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:$VQ,56:$VR,58:$VS,59:$VT,81:[1,321]},o($Vz,[2,81]),o($Va1,[2,84]),o($Va1,[2,85]),o($Vz,[2,91]),{61:322,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8},{4:323,6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:4,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($Vz,[2,94]),o($V91,[2,100],{27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,10:21,44:22,61:23,6:36,7:43,8:44,9:45,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,26:78,25:$V0,45:$V1,57:$V2,60:$V3,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy}),{6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:78,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,85:[1,324],87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:78,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,85:[1,325],87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($Vz,[2,105]),{43:[1,326]},{56:[1,327]},{6:36,7:43,8:44,9:45,10:21,11:46,12:47,13:48,14:49,15:50,16:51,17:52,18:53,19:54,20:55,21:56,22:57,23:58,24:59,25:$V0,26:78,27:5,28:6,29:7,30:8,31:9,32:10,33:11,34:12,35:13,36:14,37:15,38:16,39:17,40:18,41:19,42:20,44:22,45:$V1,57:$V2,60:$V3,61:23,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,85:[1,328],87:$Vi,90:$Vj,92:$Vk,98:$Vl,99:$Vm,100:$Vn,102:$Vo,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($Vz,[2,103]),o($Vz,[2,104]),o($Vz,[2,80]),{43:[1,329]},o($Vz,[2,93]),o($Vz,[2,88])],
defaultActions: {3:[2,2],77:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	let variable_imprimir ="accediendo a variable";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://blancos
break;
case 1://ignorar blancos
break;
case 2://comentarios una linea
break;
case 3://comentarios multilinea
break;
case 4:return 63;
break;
case 5:return 64;
break;
case 6:return 65;
break;
case 7:return 66;
break;
case 8:return 67;
break;
case 9:return 71;
break;
case 10:return 72;
break;
case 11:return 104;
break;
case 12:return 90;
break;
case 13:return 91;
break;
case 14:return 98;
break;
case 15:return 99;
break;
case 16:return 100;
break;
case 17:return 92;
break;
case 18:return 96;
break;
case 19:return 82;
break;
case 20:return 87;
break;
case 21:return 89;
break;
case 22:return 97;
break;
case 23:return 74;
break;
case 24:return 75;
break;
case 25:return 76;
break;
case 26:return 102;
break;
case 27:return 105;
break;
case 28:return 106;
break;
case 29:return 107;
break;
case 30:return 108;
break;
case 31:return 109;
break;
case 32:return 110;
break;
case 33:return 111;
break;
case 34:return 112;
break;
case 35:return 113;
break;
case 36:return 86;
break;
case 37:return 88;
break;
case 38:return 49;
break;
case 39:return 45;
break;
case 40:return 48;
break;
case 41:return 47;
break;
case 42:return 46;
break;
case 43:return 50;
break;
case 44:return 51;
break;
case 45:return 52;
break;
case 46:return 53;
break;
case 47:return 54;
break;
case 48:return 55;
break;
case 49:return 56;
break;
case 50:return 78;
break;
case 51:return 77;
break;
case 52:return 59;
break;
case 53:return 58;
break;
case 54:return 57;
break;
case 55:return 43;
break;
case 56:return 83;
break;
case 57:return 85;
break;
case 58:return 60;
break;
case 59:return 62;
break;
case 60:return 80;
break;
case 61:return 81;
break;
case 62:return 79;
break;
case 63:return 68;
break;
case 64:return 73;
break;
case 65:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 69;
break;
case 66:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 70;
break;
case 67:return 25;
break;
case 68:return 5;
break;
case 69:console.log(yy_.yytext); return 'INVALID'
break;
}
},
rules: [/^(?:[ \r\t\n]+)/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:\/\*([^*]|(\*[^/]))+\*\/)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:main\b)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?::)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:=)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:\\'(.|\\n|\\|"|\\t|\\')\\')/i,/^(?:"([^"]|(\\"))+")/i,/^(?:[a-z_][a-z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}